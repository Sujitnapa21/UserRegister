// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Sujitnapa21/app/ent/sex"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Sex is the model entity for the Sex schema.
type Sex struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Sexname holds the value of the "sexname" field.
	Sexname string `json:"sexname,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SexQuery when eager-loading is set.
	Edges SexEdges `json:"edges"`
}

// SexEdges holds the relations/edges for other nodes in the graph.
type SexEdges struct {
	// User holds the value of the user edge.
	User []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e SexEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sex) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // sexname
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sex fields.
func (s *Sex) assignValues(values ...interface{}) error {
	if m, n := len(values), len(sex.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field sexname", values[0])
	} else if value.Valid {
		s.Sexname = value.String
	}
	return nil
}

// QueryUser queries the user edge of the Sex.
func (s *Sex) QueryUser() *UserQuery {
	return (&SexClient{config: s.config}).QueryUser(s)
}

// Update returns a builder for updating this Sex.
// Note that, you need to call Sex.Unwrap() before calling this method, if this Sex
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sex) Update() *SexUpdateOne {
	return (&SexClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Sex) Unwrap() *Sex {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sex is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sex) String() string {
	var builder strings.Builder
	builder.WriteString("Sex(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", sexname=")
	builder.WriteString(s.Sexname)
	builder.WriteByte(')')
	return builder.String()
}

// Sexes is a parsable slice of Sex.
type Sexes []*Sex

func (s Sexes) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
